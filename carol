alfabeto			[a-zA-Z]
numero				[0-9]
simbolo            		[$_]
exponencial			[Ee]
mais_ou_menos			[+-]
proibidos			[^(f|n|r|t|"\\"|"\*")]
%X COMMENT
%X COMMENT2
%X STR
%X ERRO
%{
#include<stdio.h>
int line_count=0;
int col_count=0;
%}

%%

"//"									{BEGIN COMMENT2;}
<COMMENT2>\n|\r|(\r\n)  						{BEGIN 0;} //regressar ao normal
<COMMENT2>.	  							{;} //ignorar

"/*" 									{BEGIN COMMENT;}
<COMMENT>"*/" 								{BEGIN 0;} //regressar ao normal
<COMMENT><<EOF>>							{BEGIN 0;} //regressar ao normal
<COMMENT>\n|\r|(\r\n)  							{;} //ignorar
<COMMENT>.	  							{;} //ignorar

\"									{BEGIN STR;}
<STR><<EOF>>								{BEGIN 0;}
<STR>({alfabeto}*|{numero}*|" "*|(\\t)*|(\\f)*|(\\n)*|(\\r)*|(\\\*)*|(\t)*|(\\\\)*|(\\\")*)+\"				{printf("STRLIT(\"%s)\n",yytext);BEGIN 0;}
<STR>\\{proibidos}							{printf("Line %d, col %d: invalid escape sequence (%s) \n",line_count,col_count,yytext);BEGIN ERRO;}
<STR>.									;

<ERRO>({alfabeto}*|{numero}*|" "*)+\"					{BEGIN 0;}					

						
\.									{printf("Line %d, col %d: illegal character (.)\n",line_count,col_count);}
"++"|"--"|"null"|"Integer"|"System"|"abstract"|"continue"|"switch"|"assert"|"default"|"package"|"synchronized"|"do"|"goto"|"private"|"break"|"byte"|"case"|"catch"|"char"|"const"|"enum"|"extends"|"final"|"finally"|"float"|"for"|"implements"|"import"|"instanceof"|"interface"|"long"|"native"|"new"|"protected"|"short"|"strictfp"|"super"|"this"|"throw"|"throws"|"transient"|"try"|"volatile"	{printf("RESERVED(%s)\n",yytext);}
(({numero}+("_"{numero}+)*)*"."(({numero}+("_"+{numero}+)+)|{numero}+|{exponencial}{mais_ou_menos}{numero}+("_"+{numero}+)*|{exponencial}{numero}+("_"+{numero}+)*)*)|({numero}+("_"+{numero}+)*{exponencial}{mais_ou_menos}?{numero}+("_"+{numero}+)*)		{printf("REALLIT(%s)\n",yytext);}

{numero}+(({numero}|"_")*{numero}+)*					{printf("INTLIT(%s)\n",yytext);}
"true"|"false"								{printf("BOOLLIT(%s)\n",yytext);}
"&&"									{printf("AND\n");}
"="									{printf("ASSIGN\n");}
"*"									{printf("STAR\n");}
","									{printf("COMMA\n");}
"/"									{printf("DIV\n");}
"=="									{printf("EQ\n");}	
">="									{printf("GE\n");}
">"									{printf("GT\n");}
"{"									{printf("LBRACE\n");}
"<="									{printf("LE\n");}
"("									{printf("LPAR\n");}
"["									{printf("LSQ\n");}
"<"									{printf("LT\n");}
"-"									{printf("MINUS\n");}
"%"									{printf("MOD\n");}
"!="									{printf("NE\n");}
"!"									{printf("NOT\n");}
"||"									{printf("OR\n");}
"+"									{printf("PLUS\n");}
"}"									{printf("RBRACE\n");}
")"									{printf("RPAR\n");}
"]"									{printf("RSQ\n");}
";"									{printf("SEMICOLON\n");}
"->"									{printf("ARROW\n");}
"<<"									{printf("LSHIFT\n");}
">>"									{printf("RSHIFT\n");}
"^"									{printf("XOR\n");}
"boolean"								{printf("BOOL\n");}
"class"									{printf("CLASS\n");}
".length"								{printf("DOTLENGTH\n");}
"double"								{printf("DOUBLE\n");}
"else"									{printf("ELSE\n");}
"if"									{printf("IF\n");}
"int"									{printf("INT\n");}
"System.out.print"							{printf("PRINT\n");}
"Integer.parseInt"							{printf("PARSEINT\n");}
"public"								{printf("PUBLIC\n");}
"return"								{printf("RETURN\n");}
"static"								{printf("STATIC\n");}
"String"								{printf("STRING\n");}
"void"									{printf("VOID\n");}
"while"									{printf("WHILE\n");}
({alfabeto}|{simbolo})+({numero}|{alfabeto}|{simbolo})*    		{printf("ID(%s)\n",yytext);} //not sure
.									{col_count++;}
\n									{line_count++;col_count=0;}


%%

int main()
{
	yylex();
	return 0;
}

int yywrap()
{
	return 1;
}
